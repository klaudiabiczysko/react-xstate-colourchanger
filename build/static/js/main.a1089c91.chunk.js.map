{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","booleanGrammar","bool","dmMachine","initial","states","init","on","CLICK","welcome","id","RECOGNISED","target","actions","assign","context","activity","recResult","prompt","entry","ENDSPEECH","ask","query","invoke","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","intent","name","console","log","onError","processer","cond","nomatch","todo_item","timer","appointment","who","wholeday","whole_day_confirmation","time_confirmation","confirmed","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.a1089c91.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dmappointment.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n\t\tentry: say(prompt),\n\t\ton: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n\t\tentry: send('LISTEN'),\n            },\n\t}})\n}\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Julia\": { person: \"Julia Harvees\" },\n    \"Victoria\": {person: \"Victoria Bloom\"},\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"at 5\": { time: \"5:00\"},\n    \"5\": { time: \"5:00\"},\n    \"at 5 p.m.\": {time: \"5:00 p.m.\"},\n    \"at 6\": { time: \"6:00\"},\n    \"6\": { time: \"6:00\"},\n    \"at 6 p.m.\": { time: \"6:00 p.m.\"},\n    \"at 7\": { time: \"7:00\"},\n    \"7\": { time: \"7:00\"},\n    \"at 7 p.m.\": { time: \"7:00 p.m.\"},\n    \"at 8\": { time: \"8:00\"},\n    \"8\": { time: \"8:00\"},\n    \"at 10\": { time: \"10:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 11\": {time: \"11:00\"},\n    \"11\": {time: \"11:00\"},\n    \"at 12\": { time: \"12:00\"},\n    \"12\": { time: \"12:00\"},\n    \"at 13\": { time: \"1:00 p.m.\"},\n    \"at 14\": { time: \"2:00 p.m.\"},\n    \"at 15\": { time: \"3:00 p.m.\"},\n    \"at 16\": { time: \"4:00 p.m.\"},\n\n}\n\nconst booleanGrammar: { [index: string]: {bool?: boolean}} = {\n    \"yes\": { bool: true },\n    \"yep\": { bool: true },\n    \"of course\": { bool: true },\n    \"sure\": { bool: true },\n    \"I want to\": { bool: true },\n    \"no\": { bool: false },\n    \"no way\": { bool: false },\n    \"hell no\": { bool: false },\n    \"nope\": { bool: false },\n}\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\twelcome: {\n        id: \"start\",\n\t    on: {\n\t\tRECOGNISED: {\n\t\t    target: 'query',\n\t\t    actions: assign((context) => { return { activity: context.recResult } }),\n                }\n            },\n\t    ...promptAndAsk(\"What would you like to do? You can choose appointment, to do item or timer.\")\n\t},\n    \tquery: {\n\t    invoke: {\n\t\tid: 'rasa',\n                src: (context, event) => nluRequest(context.activity),\n                onDone: {\n                    target: 'processer',\n                    actions: [assign((context, event) => { return {activity: event.data.intent.name }}),\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\n                },\n\t\tonError: {\n                    target: 'welcome',\n\t\t    actions: (context,event) => console.log(event.data)\n                }\n            }\n\t},\n    processer: {\n        initial: \"prompt\",\n        on: {\n            ENDSPEECH: [\n                { target: 'todo_item', cond: (context) => context.activity === 'todo_item' },\n                { target: 'timer', cond: (context) => context.activity === 'timer' },\n                { target: 'appointment', cond: (context) => context.activity === 'appointment' }, \n                { target: \".nomatch\" } ]\n        },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `OK`\n                \n                })),\n    },\n            nomatch: {\n                entry: say(\"Sorry, I don't understand\"),\n                on: { ENDSPEECH: \"#start\" }\n    } \n}\n    },\n    todo_item: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Welcome to To do item`\n                }))\n            },\n    }\n    },\n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Welcome to timer`\n                    }))\n                },\n\t\t}\n\t\t},\n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n\t  }\n        },\n\twholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult].bool === true),\n\t\ttarget: \"whole_day_confirmation\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n\ttime: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"time_confirmation\"\n                },\n                { target: \".nomatch\" }]\n\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. What time is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n        },\n\twhole_day_confirmation: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult].bool === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n \ttime_confirmation: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                    target: \"who\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult].bool === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                },\n            },\n\t    confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t}\n\t\t}\n        }})","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dmappointment.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}