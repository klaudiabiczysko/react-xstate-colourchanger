{"version":3,"sources":["dmAppointmentPlus.ts","dmMenu.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","promptAndAsk","prompt","reprompt","nomatch","initial","states","entry","on","ENDSPEECH","ask","delay","id","grammar","person","day","time","booleanGrammar","bool","commands","count","dmMachine","init","CLICK","maxspeech","welcome","appointment","RECOGNISED","cond","context","recResult","target","hist","who","assign","MAXSPEECH","wholeday","whole_day_confirmation","time_confirmation","confirmed","help","always","final","dmMenu","activity","query","invoke","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","intent","name","console","log","onError","processer","todo_item","timer","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","changeAction","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.a18a211e.chunk.js","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\";\nconst { send, cancel } = actions;\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>, reprompt:string, nomatch: string) : MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states:{\n            prompt: {\n                entry: prompt,\n                on: { ENDSPEECH: 'ask' }\n                },\n\n            reprompt: {\n                entry: say(reprompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: 5000, id: 'maxsp'})],\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"reprompt\" }\n            },\n        }\n    })\n}\n\n\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    //people\n    \"John\": { person: \"John Appleseed\" },\n    \"Julia\": { person: \"Julia Harvees\" },\n    \"Victoria\": {person: \"Victoria Bloom\"},\n\n    //days\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    //time\n    \"at 5\": { time: \"5:00\"},\n    \"5\": { time: \"5:00\"},\n    \"at 5 p.m.\": {time: \"5:00 p.m.\"},\n    \"at 6\": { time: \"6:00\"},\n    \"6\": { time: \"6:00\"},\n    \"at 6 p.m.\": { time: \"6:00 p.m.\"},\n    \"at 7\": { time: \"7:00\"},\n    \"7\": { time: \"7:00\"},\n    \"at 7 p.m.\": { time: \"7:00 p.m.\"},\n    \"at 8\": { time: \"8:00\"},\n    \"8\": { time: \"8:00\"},\n    \"at 10\": { time: \"10:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 11\": {time: \"11:00\"},\n    \"11\": {time: \"11:00\"},\n    \"at 12\": { time: \"12:00\"},\n    \"12\": { time: \"12:00\"},\n    \"at 13\": { time: \"1:00 p.m.\"},\n    \"at 14\": { time: \"2:00 p.m.\"},\n    \"at 15\": { time: \"3:00 p.m.\"},\n    \"at 16\": { time: \"4:00 p.m.\"},\n\n}\n\nconst booleanGrammar: { [index: string]: {bool?: boolean}} = {\n    //agree\n    \"yes\": { bool: true },\n    \"yep\": { bool: true },\n    \"of course\": { bool: true },\n    \"sure\": { bool: true },\n    \"I want to\": { bool: true },\n\n    //disagree\n    \"no\": { bool: false },\n    \"no way\": { bool: false },\n    \"hell no\": { bool: false },\n    \"nope\": { bool: false },\n}\n\nconst commands = {\"help\":\"H\"};\n\nlet count = 0\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        maxspeech : {\n            entry: say(\"I cannot hear you. Don't be so shy! Let me say that again.\"),\n            on: {'ENDSPEECH': 'appointment.hist'}\n        },\n        welcome: { \n            initial: \"prompt\",\n            on: { ENDSPEECH: \"appointment\" },\n            states: { \n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        appointment: {\n            initial: \"who\",\n            on: {\n                RECOGNISED: {cond: (context) => (context.recResult in commands),\n                           target: \"#help\"},},\n\n\n            states:{\n                hist: {type: 'history'},\n                who: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"person\" in (grammar[context.recResult] || {}), \n                            actions: [assign((context) => { return { person: grammar[context.recResult].person } }),\n                            cancel('maxsp')],\n                            target: \"day\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                        {target: '#root.dm.appointment.final'}]\n                    },\n                    \n                    ...promptAndAsk(say(\"Who are you meeting with?\"),\n                    \"Tell me a name\",\n                    \"Sorry, I don't know them\")\n                },\n\n                day:{\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"day\" in (grammar[context.recResult] || {}), \n                            actions: [assign((context) => { return { day: grammar[context.recResult].day } }),\n                            cancel('maxsp')],\n                            target: \"wholeday\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        },\n                    ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK. ${context.person}. On which day is your meeting?`})), \n                        \"Tell me a day of the week\",\n                        \"Sorry, I did not get that.\")\n                },\n\n                wholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => \"bool\" in (booleanGrammar[context.recResult] || {}) &&\n                            (booleanGrammar[context.recResult].bool === true),\n                            actions: cancel('maxsp'),\n                            target: \"whole_day_confirmation\"}, \n\n                            {cond: (context) => \"bool\" in (booleanGrammar[context.recResult] || {}) &&\n                            (booleanGrammar[context.recResult].bool === false),\n                            actions: cancel('maxsp'),\n                            target: \"time\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {cond: (context) => !(context.recResult in commands),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`})),\n                        \"Will it take the entire day?\",\n                        \"Sorry, I'm afraid that I don't understand\"),\n                },\n                \n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: [cancel('maxsp'),assign((context) => { return { time: grammar[context.recResult].time } }),],\n                            target: \"time_confirmation\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK. What time is your meeting?`})), \n                            \"When does your meeting start?\",\n                            \"Sorry, I don't understand\"),\n                        },\n                whole_day_confirmation:{\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"bool\" in (booleanGrammar[context.recResult] || {}) &&\n                            (booleanGrammar[context.recResult].bool === true),\n                            actions: cancel('maxsp'),\n                            target: \"confirmed\"},\n\n                            {cond: (context) => \"bool\" in (booleanGrammar[context.recResult] || {}) &&\n                            (booleanGrammar[context.recResult].bool === false),\n                            actions: cancel('maxsp'),\n                            target: \"wholeday\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n                        \n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})),\n                    \"Say yes or no\",\n                    \"Sorry, I do not understand\")\n                },\n                time_confirmation: {\n                  initial: \"prompt\",\n                    on:  {\n                        RECOGNISED: [\n                            {cond: (context) => (booleanGrammar[context.recResult].bool === true),\n                            actions:cancel('maxsp'),\n                            target: \"confirmed\"},\n\n                            {cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                            actions: cancel('maxsp'),\n                            target: \"who\"},\n\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\n                    \"Say yes or no\",\n                    \"Sorry, I do not understand\"),\n                },\n                confirmed: {\n                    initial: \"prompt\",\n                    on: { ENDSPEECH: \"#root.dm.init\" },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Your appointment has been created!`}))\n                        },\n                }\n                },\n            }\n           \n        },\n        help: {\n            id: 'help',\n            entry: say(\"We can go back if you need help\"),\n            always: [{target: 'appointment.hist',\n                      actions: assign((context) => {return {count: ( count - 1 )}}) }]\n        },\n\n        final: {\n            entry: say(\"Let me know if you change your mind about talking to me\"),\n            on: {'ENDSPEECH': '#root.dm.init'}\n        },  \n    }\n})","import { MachineConfig, send, Action, assign } from \"xstate\";\n\n//import { dmMachine } from \"./dmColourChanger\";\nimport { dmMachine} from \"./dmAppointmentPlus\";//dmAppointmentPlus\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dmappointment.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n\t\tentry: say(prompt),\n\t\ton: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n\t\tentry: send('LISTEN'),\n            },\n\t}})\n}\n\n\nexport const dmMenu: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\twelcome: {\n        id: \"start\",\n\t    on: {\n\t\tRECOGNISED: {\n\t\t    target: 'query',\n\t\t    actions: assign((context) => { return { activity: context.recResult } }),\n                }\n            },\n\t    ...promptAndAsk(\"What would you like to do? You can choose appointment, to do item or timer.\")\n\t},\n    \tquery: {\n\t    invoke: {\n\t\tid: 'rasa',\n                src: (context, event) => nluRequest(context.activity),\n                onDone: {\n                    target: 'processer',\n                    actions: [assign((context, event) => { return {activity: event.data.intent.name }}),\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\n                },\n\t\tonError: {\n                    target: 'welcome',\n\t\t    actions: (context,event) => console.log(event.data)\n                }\n            }\n\t},\n    processer: {\n        initial: \"prompt\",\n        on: {\n            ENDSPEECH: [\n                { target: 'todo_item', cond: (context) => context.activity === 'todo_item' },\n                { target: 'timer', cond: (context) => context.activity === 'timer' },\n                { target: 'appointment', cond: (context) => context.activity === 'appointment' }, \n                { target: \".nomatch\" } ]\n        },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `OK`\n                \n                })),\n    },\n            nomatch: {\n                entry: say(\"Sorry, I don't understand\"),\n                on: { ENDSPEECH: \"#start\" }\n    } \n}\n    },\n    todo_item: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Welcome to To do item`\n                }))\n            },\n    }\n    },\n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Welcome to timer`\n                    }))\n                },\n\t\t}\n\t\t},\n        appointment: {\n            ...dmMachine\n        }\n    }})","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMenu } from \"./dmMenu\"; \n//import { dmMachine } from \"./dmSmarthome\"; \n//import { dmMachine } from \"./dmAppointment\";\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMenu  //dmMachine if dmSmarthome or dmAppointment\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        MAXSPEECH: 'idle',\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            changeAction: asEffect((context) => {\n                console.log('Action performed');\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}