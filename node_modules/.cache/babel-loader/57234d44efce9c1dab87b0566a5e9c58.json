{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Joan\": {\n    person: \"Joan Orange\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"at ten\": {\n    time: \"10:00\"\n  },\n  \"ten\": {\n    time: \"10:00\"\n  },\n  \"at eleven\": {\n    time: \"11:00\"\n  }\n};\nconst boolGrammar = {\n  \"yes\": true,\n  \"of course\": true,\n  \"no\": false,\n  \"no way\": false\n};\nlet a = boolGrammar[\"yes\"];\nlet b = boolGrammar[\"no\"];\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"duration\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    duration: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] === b,\n          target: \"time\"\n        }, {\n          cond: context => boolGrammar[context.recResult] === a,\n          target: \"confirm_meeting_whole_day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"confirm_time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". What time is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_meeting_whole_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] === b,\n          target: \"init\"\n        }, {\n          cond: context => boolGrammar[context.recResult] === a,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] === b,\n          target: \"who\"\n        }, {\n          cond: context => boolGrammar[context.recResult] === a,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmed: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    }\n  }\n}; //why time is not working\n// let a,b ?? or if","map":{"version":3,"sources":["/mnt/c/Users/Acer/Desktop/LANGUAGE-TECHNOLOGY/Dialogue-Systems/assignment2/code/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","boolGrammar","a","b","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","duration","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Joan\": { person: \"Joan Orange\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"at ten\": { time: \"10:00\" },\n    \"ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"no\": false,\n      \"no way\": false\n}\n\nlet a = boolGrammar[\"yes\"]\nlet b = boolGrammar[\"no\"]\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n\t  }\n        },\n\tduration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === b),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (boolGrammar[context.recResult] === a),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n\ttime: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n                },\n                { target: \".nomatch\" }]\n\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. What time is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n        },\n\tconfirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === b),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (boolGrammar[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n \tconfirm_time: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === b),\n                    target: \"who\"\n                },\n\t\t{cond: (context) => (boolGrammar[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${time}?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                },\n            },\n\t    confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t}\n\t\t}\n        }})\n\n//why time is not working\n// let a,b ?? or if"]},"metadata":{},"sourceType":"module"}