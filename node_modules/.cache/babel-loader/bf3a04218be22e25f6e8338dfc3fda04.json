{"ast":null,"code":"import _objectSpread from \"/mnt/c/Users/Acer/Desktop/LANGUAGE-TECHNOLOGY/Dialogue-Systems/assignment2/code/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dmappointment.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Julia\": {\n    person: \"Julia Harvees\"\n  },\n  \"Victoria\": {\n    person: \"Victoria Bloom\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"5\": {\n    time: \"5:00\"\n  },\n  \"at 5 p.m.\": {\n    time: \"5:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"6\": {\n    time: \"6:00\"\n  },\n  \"at 6 p.m.\": {\n    time: \"6:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"7\": {\n    time: \"7:00\"\n  },\n  \"at 7 p.m.\": {\n    time: \"7:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 13\": {\n    time: \"1:00\"\n  },\n  \"at 14\": {\n    time: \"2:00\"\n  },\n  \"at 15\": {\n    time: \"3:00\"\n  },\n  \"at 16\": {\n    time: \"4:00\"\n  }\n};\nconst booleanGrammar = {\n  \"yes\": {\n    bool: true\n  },\n  \"yep\": {\n    bool: true\n  },\n  \"of course\": {\n    bool: true\n  },\n  \"sure\": {\n    bool: true\n  },\n  \"I want to\": {\n    bool: true\n  },\n  \"no\": {\n    bool: false\n  },\n  \"no way\": {\n    bool: false\n  },\n  \"hell no\": {\n    bool: false\n  },\n  \"nope\": {\n    bool: false\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      id: \"start\",\n      on: {\n        RECOGNISED: {\n          target: 'query',\n          actions: assign(context => {\n            return {\n              activity: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"What would you like to do? You can choose appointment, to do item or timer.\")),\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.activity),\n        onDone: {\n          target: 'processer',\n          actions: [assign((context, event) => {\n            return {\n              activity: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    processer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: 'todo_item',\n          cond: context => context.activity === 'todo_item'\n        }, {\n          target: 'timer',\n          cond: context => context.activity === 'timer'\n        }, {\n          target: 'appointment',\n          cond: context => context.activity === 'appointment'\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK\"\n          }))\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"#start\"\n          }\n        }\n      }\n    },\n    todo_item: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Welcome to To do item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Welcome to timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => booleanGrammar[context.recResult].bool === false,\n          target: \"time\"\n        }, {\n          cond: context => booleanGrammar[context.recResult].bool === true,\n          target: \"whole_day_confirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"time_confirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". What time is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    whole_day_confirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => booleanGrammar[context.recResult].bool === false,\n          target: \"init\"\n        }, {\n          cond: context => booleanGrammar[context.recResult].bool === true,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time_confirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => booleanGrammar[context.recResult].bool === false,\n          target: \"who\"\n        }, {\n          cond: context => booleanGrammar[context.recResult].bool === true,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmed: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/Acer/Desktop/LANGUAGE-TECHNOLOGY/Dialogue-Systems/assignment2/code/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","say","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","grammar","person","day","time","booleanGrammar","bool","dmMachine","init","CLICK","welcome","id","RECOGNISED","target","actions","context","activity","recResult","query","invoke","src","event","onDone","intent","name","console","log","onError","processer","cond","nomatch","todo_item","timer","appointment","who","wholeday","whole_day_confirmation","time_confirmation","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dmappointment.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n\t\tentry: say(prompt),\n\t\ton: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n\t\tentry: send('LISTEN'),\n            },\n\t}})\n}\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Julia\": { person: \"Julia Harvees\" },\n    \"Victoria\": {person: \"Victoria Bloom\"},\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"at 5\": { time: \"5:00\"},\n    \"5\": { time: \"5:00\"},\n    \"at 5 p.m.\": {time: \"5:00\"},\n    \"at 6\": { time: \"6:00\"},\n    \"6\": { time: \"6:00\"},\n    \"at 6 p.m.\": { time: \"6:00\"},\n    \"at 7\": { time: \"7:00\"},\n    \"7\": { time: \"7:00\"},\n    \"at 7 p.m.\": { time: \"7:00\"},\n    \"at 8\": { time: \"8:00\"},\n    \"8\": { time: \"8:00\"},\n    \"at 10\": { time: \"10:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 11\": {time: \"11:00\"},\n    \"11\": {time: \"11:00\"},\n    \"at 12\": { time: \"12:00\"},\n    \"12\": { time: \"12:00\"},\n    \"at 13\": { time: \"1:00\"},\n    \"at 14\": { time: \"2:00\"},\n    \"at 15\": { time: \"3:00\"},\n    \"at 16\": { time: \"4:00\"},\n\n}\n\nconst booleanGrammar: { [index: string]: {bool?: boolean}} = {\n    \"yes\": { bool: true },\n    \"yep\": { bool: true },\n    \"of course\": { bool: true },\n    \"sure\": { bool: true },\n    \"I want to\": { bool: true },\n    \"no\": { bool: false },\n    \"no way\": { bool: false },\n    \"hell no\": { bool: false },\n    \"nope\": { bool: false },\n}\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\twelcome: {\n        id: \"start\",\n\t    on: {\n\t\tRECOGNISED: {\n\t\t    target: 'query',\n\t\t    actions: assign((context) => { return { activity: context.recResult } }),\n                }\n            },\n\t    ...promptAndAsk(\"What would you like to do? You can choose appointment, to do item or timer.\")\n\t},\n    \tquery: {\n\t    invoke: {\n\t\tid: 'rasa',\n                src: (context, event) => nluRequest(context.activity),\n                onDone: {\n                    target: 'processer',\n                    actions: [assign((context, event) => { return {activity: event.data.intent.name }}),\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\n                },\n\t\tonError: {\n                    target: 'welcome',\n\t\t    actions: (context,event) => console.log(event.data)\n                }\n            }\n\t},\n    processer: {\n        initial: \"prompt\",\n        on: {\n            ENDSPEECH: [\n                { target: 'todo_item', cond: (context) => context.activity === 'todo_item' },\n                { target: 'timer', cond: (context) => context.activity === 'timer' },\n                { target: 'appointment', cond: (context) => context.activity === 'appointment' }, \n                { target: \".nomatch\" } ]\n        },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `OK`\n                \n                })),\n    },\n            nomatch: {\n                entry: say(\"Sorry, I don't understand\"),\n                on: { ENDSPEECH: \"#start\" }\n    } \n}\n    },\n    todo_item: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Welcome to To do item`\n                }))\n            },\n    }\n    },\n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Welcome to timer`\n                    }))\n                },\n\t\t}\n\t\t},\n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n\t  }\n        },\n\twholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult].bool === true),\n\t\ttarget: \"whole_day_confirmation\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n\ttime: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"time_confirmation\"\n                },\n                { target: \".nomatch\" }]\n\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. What time is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n        },\n\twhole_day_confirmation: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult].bool === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n \ttime_confirmation: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                    target: \"who\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult].bool === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                },\n            },\n\t    confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t}\n\t\t}\n        }})"]},"metadata":{},"sourceType":"module"}