{"ast":null,"code":"import { send, assign } from \"xstate\";\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dmappointment.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Julia\": {\n    person: \"Julia Harvees\"\n  },\n  \"Victoria\": {\n    person: \"Victoria Bloom\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"at 5 p.m.\": {\n    time: \"17:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 13\": {\n    time: \"13:00\"\n  },\n  \"at 14\": {\n    time: \"14:00\"\n  },\n  \"at 15\": {\n    time: \"15:00\"\n  },\n  \"at 16\": {\n    time: \"16:00\"\n  }\n};\nconst booleanGrammar = {\n  \"yes\": {\n    bool: true\n  },\n  \"yep\": {\n    bool: true\n  },\n  \"of course\": {\n    bool: true\n  },\n  \"sure\": {\n    bool: true\n  },\n  \"I want to\": {\n    bool: true\n  },\n  \"no\": {\n    bool: false\n  },\n  \"no way\": {\n    bool: false\n  },\n  \"hell no\": {\n    bool: false\n  },\n  \"nope\": {\n    bool: false\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      on: {\n        RECOGNISED: {\n          target: 'query',\n          actions: assign(context => {\n            return {\n              activity: context.recResult\n            };\n          })\n        }\n      }\n    },\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.activity),\n        onDone: {\n          target: 'processer',\n          actions: [assign((context, event) => {\n            return {\n              activity: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    processer: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: 'todo_item',\n          cond: context => context.activity === 'todo_item'\n        }, {\n          target: 'timer',\n          cond: context => context.activity === 'timer'\n        }, {\n          target: 'appointment',\n          cond: context => context.activity === 'appointment'\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"\\\"What would you like to do? You can choose appointment, to do item or timer.\\\"\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    todo_item: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Welcome to TODO Item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Welcome to timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => booleanGrammar[context.recResult].bool === false,\n          target: \"time\"\n        }, {\n          cond: context => booleanGrammar[context.recResult].bool === true,\n          target: \"whole_day_confirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"time_confirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". What time is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    whole_day_confirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => booleanGrammar[context.recResult].bool === false,\n          target: \"init\"\n        }, {\n          cond: context => booleanGrammar[context.recResult].bool === true,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time_confirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => booleanGrammar[context.recResult].bool === false,\n          target: \"who\"\n        }, {\n          cond: context => booleanGrammar[context.recResult].bool === true,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmed: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/Acer/Desktop/LANGUAGE-TECHNOLOGY/Dialogue-Systems/assignment2/code/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","say","_context","type","value","listen","grammar","person","day","time","booleanGrammar","bool","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","context","activity","recResult","query","invoke","id","src","event","onDone","intent","name","console","log","onError","processer","cond","prompt","entry","ENDSPEECH","ask","nomatch","todo_item","timer","appointment","who","wholeday","whole_day_confirmation","time_confirmation","confirmed"],"mappings":"AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,QAAoD,QAApD;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;AACA,MAAMC,OAAO,GAAG,iDAAhB;;AACA,MAAMC,UAAU,GAAIC,IAAD,IACfC,KAAK,CAAC,IAAIC,OAAJ,CAAYL,QAAQ,GAAGC,OAAvB,EAAgC;AAClCK,EAAAA,MAAM,EAAE,MAD0B;AAElCC,EAAAA,OAAO,EAAE;AAAE,cAAU;AAAZ,GAFyB;AAES;AAC3CC,EAAAA,IAAI,yBAAeL,IAAf;AAH8B,CAAhC,CAAD,CAAL,CAKKM,IALL,CAKUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EALlB,CADJ;;AAQA,SAASC,GAAT,CAAaT,IAAb,EAAyD;AACrD,SAAOL,IAAI,CAAEe,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEZ;AAAxB,GAA3B,CAAD,CAAX;AACH;;AAED,SAASa,MAAT,GAAgD;AAC5C,SAAOlB,IAAI,CAAC,QAAD,CAAX;AACH;;AAGD,MAAMmB,OAA8E,GAAG;AACnF,UAAQ;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAD2E;AAEnF,WAAS;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAF0E;AAGnF,cAAY;AAACA,IAAAA,MAAM,EAAE;AAAT,GAHuE;AAInF,eAAa;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAJsE;AAKnF,gBAAc;AAAEA,IAAAA,GAAG,EAAE;AAAP,GALqE;AAMnF,kBAAgB;AAAEA,IAAAA,GAAG,EAAE;AAAP,GANmE;AAOnF,iBAAe;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAPoE;AAQnF,eAAa;AAAEA,IAAAA,GAAG,EAAE;AAAP,GARsE;AASnF,iBAAe;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAToE;AAUnF,eAAa;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAVsE;AAWnF,UAAQ;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAX2E;AAYnF,eAAa;AAACA,IAAAA,IAAI,EAAE;AAAP,GAZsE;AAanF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAb2E;AAcnF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAd2E;AAenF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAf2E;AAgBnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAhB0E;AAiBnF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAjB2E;AAkBnF,WAAS;AAACA,IAAAA,IAAI,EAAE;AAAP,GAlB0E;AAmBnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAnB0E;AAoBnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GApB0E;AAqBnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GArB0E;AAsBnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAtB0E;AAuBnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR;AAvB0E,CAAvF;AA2BA,MAAMC,cAAoD,GAAG;AACzD,SAAO;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADkD;AAEzD,SAAO;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAFkD;AAGzD,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAH4C;AAIzD,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAJiD;AAKzD,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAL4C;AAMzD,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GANmD;AAOzD,YAAU;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAP+C;AAQzD,aAAW;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAR8C;AASzD,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR;AATiD,CAA7D;AAiBA,OAAO,MAAMC,SAAmD,GAAI;AAChEC,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,EAAE,EAAE;AACAC,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMXC,IAAAA,OAAO,EAAE;AACLF,MAAAA,EAAE,EAAE;AACPG,QAAAA,UAAU,EAAE;AACRC,UAAAA,MAAM,EAAE,OADA;AAERC,UAAAA,OAAO,EAAEjC,MAAM,CAAEkC,OAAD,IAAa;AAAE,mBAAO;AAAEC,cAAAA,QAAQ,EAAED,OAAO,CAACE;AAApB,aAAP;AAAwC,WAAxD;AAFP;AADL;AADC,KANE;AAcPC,IAAAA,KAAK,EAAE;AACPC,MAAAA,MAAM,EAAE;AACXC,QAAAA,EAAE,EAAE,MADO;AAEGC,QAAAA,GAAG,EAAE,CAACN,OAAD,EAAUO,KAAV,KAAoBtC,UAAU,CAAC+B,OAAO,CAACC,QAAT,CAFtC;AAGGO,QAAAA,MAAM,EAAE;AACJV,UAAAA,MAAM,EAAE,WADJ;AAEJC,UAAAA,OAAO,EAAE,CAACjC,MAAM,CAAC,CAACkC,OAAD,EAAUO,KAAV,KAAoB;AAAE,mBAAO;AAACN,cAAAA,QAAQ,EAAEM,KAAK,CAAC9B,IAAN,CAAWgC,MAAX,CAAkBC;AAA7B,aAAP;AAA2C,WAAlE,CAAP,EACpB,CAACV,OAAD,EAAqBO,KAArB,KAAmCI,OAAO,CAACC,GAAR,CAAYL,KAAK,CAAC9B,IAAlB,CADf;AAFL,SAHX;AAQXoC,QAAAA,OAAO,EAAE;AACSf,UAAAA,MAAM,EAAE,SADjB;AAELC,UAAAA,OAAO,EAAE,CAACC,OAAD,EAASO,KAAT,KAAmBI,OAAO,CAACC,GAAR,CAAYL,KAAK,CAAC9B,IAAlB;AAFvB;AARE;AADD,KAdA;AA6BRqC,IAAAA,SAAS,EAAE;AACPvB,MAAAA,OAAO,EAAE,QADF;AAEPG,MAAAA,EAAE,EAAE;AACAG,QAAAA,UAAU,EAAE,CAAC;AAAEC,UAAAA,MAAM,EAAE,WAAV;AAAuBiB,UAAAA,IAAI,EAAGf,OAAD,IAAaA,OAAO,CAACC,QAAR,KAAqB;AAA/D,SAAD,EACZ;AAAEH,UAAAA,MAAM,EAAE,OAAV;AAAmBiB,UAAAA,IAAI,EAAGf,OAAD,IAAaA,OAAO,CAACC,QAAR,KAAqB;AAA3D,SADY,EAEZ;AAAEH,UAAAA,MAAM,EAAE,aAAV;AAAyBiB,UAAAA,IAAI,EAAGf,OAAD,IAAaA,OAAO,CAACC,QAAR,KAAqB;AAAjE,SAFY,EAGZ;AAAEH,UAAAA,MAAM,EAAE;AAAV,SAHY;AADZ,OAFG;AAQPN,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpD,IAAI,CAAEmC,OAAD,KAAc;AACtBnB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK;AAFiB,WAAd,CAAD,CADP;AAKZY,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AALQ,SADJ;AAQZC,QAAAA,GAAG,EAAE;AACAF,UAAAA,KAAK,EAAElC,MAAM;AADb,SARO;AAWZqC,QAAAA,OAAO,EAAE;AACLH,UAAAA,KAAK,EAAEtC,GAAG,CAAC,2BAAD,CADL;AAETe,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AAFK;AAXG;AARD,KA7BH;AAsDRG,IAAAA,SAAS,EAAE;AACP9B,MAAAA,OAAO,EAAE,QADF;AAEPG,MAAAA,EAAE,EAAE;AAAEwB,QAAAA,SAAS,EAAE;AAAb,OAFG;AAGP1B,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpD,IAAI,CAAEmC,OAAD,KAAc;AACtBnB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK;AAFiB,WAAd,CAAD;AADP;AADJ;AAHD,KAtDH;AAkEJwC,IAAAA,KAAK,EAAE;AACH/B,MAAAA,OAAO,EAAE,QADN;AAEHG,MAAAA,EAAE,EAAE;AAAEwB,QAAAA,SAAS,EAAE;AAAb,OAFD;AAGH1B,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpD,IAAI,CAAEmC,OAAD,KAAc;AACtBnB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK;AAFiB,WAAd,CAAD;AADP;AADJ;AAHL,KAlEH;AA8EJyC,IAAAA,WAAW,EAAE;AACThC,MAAAA,OAAO,EAAE,QADA;AAETG,MAAAA,EAAE,EAAE;AAAEwB,QAAAA,SAAS,EAAE;AAAb,OAFK;AAGT1B,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAEtC,GAAG,CAAC,6BAAD;AAAZ;AADJ;AAHC,KA9ET;AAqFJ6C,IAAAA,GAAG,EAAE;AACDjC,MAAAA,OAAO,EAAE,QADR;AAEDG,MAAAA,EAAE,EAAE;AACAG,QAAAA,UAAU,EAAE,CAAC;AACTkB,UAAAA,IAAI,EAAGf,OAAD,IAAa,aAAahB,OAAO,CAACgB,OAAO,CAACE,SAAT,CAAP,IAA8B,EAA3C,CADV;AAETH,UAAAA,OAAO,EAAEjC,MAAM,CAAEkC,OAAD,IAAa;AAAE,mBAAO;AAAEf,cAAAA,MAAM,EAAED,OAAO,CAACgB,OAAO,CAACE,SAAT,CAAP,CAA2BjB;AAArC,aAAP;AAAsD,WAAtE,CAFN;AAGTa,UAAAA,MAAM,EAAE;AAHC,SAAD,EAMZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SANY;AADZ,OAFH;AAWDN,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEtC,GAAG,CAAC,2BAAD,CADN;AAEJe,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AAFA,SADJ;AAKJC,QAAAA,GAAG,EAAE;AACDF,UAAAA,KAAK,EAAElC,MAAM;AADZ,SALD;AAQJqC,QAAAA,OAAO,EAAE;AACLH,UAAAA,KAAK,EAAEtC,GAAG,CAAC,yBAAD,CADL;AAELe,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AAFC;AARL;AAXP,KArFD;AA8GJhC,IAAAA,GAAG,EAAE;AACDK,MAAAA,OAAO,EAAE,QADR;AAEDG,MAAAA,EAAE,EAAC;AACCG,QAAAA,UAAU,EAAE,CAAC;AACTkB,UAAAA,IAAI,EAAGf,OAAD,IAAa,UAAUhB,OAAO,CAACgB,OAAO,CAACE,SAAT,CAAP,IAA8B,EAAxC,CADV;AAETH,UAAAA,OAAO,EAAEjC,MAAM,CAAEkC,OAAD,IAAa;AAAE,mBAAO;AAAEd,cAAAA,GAAG,EAAEF,OAAO,CAACgB,OAAO,CAACE,SAAT,CAAP,CAA2BhB;AAAlC,aAAP;AAAgD,WAAhE,CAFN;AAGTY,UAAAA,MAAM,EAAE;AAHC,SAAD,EAKZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SALY;AADb,OAFF;AAUDN,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpD,IAAI,CAAEmC,OAAD,KAAc;AACtBnB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,gBAASkB,OAAO,CAACf,MAAjB;AAFiB,WAAd,CAAD,CADP;AAKlBS,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AALc,SADJ;AAQlBC,QAAAA,GAAG,EAAE;AACAF,UAAAA,KAAK,EAAElC,MAAM;AADb,SARa;AAWfqC,QAAAA,OAAO,EAAE;AACRH,UAAAA,KAAK,EAAEtC,GAAG,CAAC,2BAAD,CADF;AAEZe,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AAFQ;AAXM;AAVP,KA9GD;AAyIXO,IAAAA,QAAQ,EAAE;AACClC,MAAAA,OAAO,EAAE,QADV;AAECG,MAAAA,EAAE,EAAE;AACAG,QAAAA,UAAU,EAAE,CAAC;AAACkB,UAAAA,IAAI,EAAGf,OAAD,IAAcZ,cAAc,CAACY,OAAO,CAACE,SAAT,CAAd,CAAkCb,IAAlC,KAA2C,KAAhE;AACTS,UAAAA,MAAM,EAAE;AADC,SAAD,EAG1B;AAACiB,UAAAA,IAAI,EAAGf,OAAD,IAAcZ,cAAc,CAACY,OAAO,CAACE,SAAT,CAAd,CAAkCb,IAAlC,KAA2C,IAAhE;AACAS,UAAAA,MAAM,EAAE;AADR,SAH0B,EAMZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SANY;AADZ,OAFL;AAWCN,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpD,IAAI,CAAEmC,OAAD,KAAc;AACtBnB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,gBAASkB,OAAO,CAACf,MAAjB,iBAA8Be,OAAO,CAACd,GAAtC;AAFiB,WAAd,CAAD,CADP;AAKlBQ,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AALc,SADJ;AAQlBC,QAAAA,GAAG,EAAE;AACAF,UAAAA,KAAK,EAAElC,MAAM;AADb,SARa;AAWfqC,QAAAA,OAAO,EAAE;AACRH,UAAAA,KAAK,EAAEtC,GAAG,CAAC,2BAAD,CADF;AAEZe,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AAFQ;AAXM;AAXT,KAzIC;AAqKX/B,IAAAA,IAAI,EAAE;AACKI,MAAAA,OAAO,EAAE,QADd;AAEKG,MAAAA,EAAE,EAAE;AAAEG,QAAAA,UAAU,EAAE,CAAC;AACXkB,UAAAA,IAAI,EAAGf,OAAD,IAAa,WAAWhB,OAAO,CAACgB,OAAO,CAACE,SAAT,CAAP,IAA8B,EAAzC,CADR;AAEXH,UAAAA,OAAO,EAAEjC,MAAM,CAAEkC,OAAD,IAAa;AAAE,mBAAO;AAAEb,cAAAA,IAAI,EAAEH,OAAO,CAACgB,OAAO,CAACE,SAAT,CAAP,CAA2Bf;AAAnC,aAAP;AAAkD,WAAlE,CAFJ;AAGXW,UAAAA,MAAM,EAAE;AAHG,SAAD,EAKd;AAAEA,UAAAA,MAAM,EAAE;AAAV,SALc;AAAd,OAFT;AASKN,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpD,IAAI,CAAEmC,OAAD,KAAc;AACtBnB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,gBAASkB,OAAO,CAACf,MAAjB,iBAA8Be,OAAO,CAACd,GAAtC;AAFiB,WAAd,CAAD,CADP;AAKlBQ,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AALc,SADJ;AAQlBC,QAAAA,GAAG,EAAE;AACAF,UAAAA,KAAK,EAAElC,MAAM;AADb,SARa;AAWfqC,QAAAA,OAAO,EAAE;AACRH,UAAAA,KAAK,EAAEtC,GAAG,CAAC,2BAAD,CADF;AAEZe,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AAFQ;AAXM;AATb,KArKK;AA+LXQ,IAAAA,sBAAsB,EAAE;AACbnC,MAAAA,OAAO,EAAE,QADI;AAEbG,MAAAA,EAAE,EAAE;AACAG,QAAAA,UAAU,EAAE,CAAC;AAACkB,UAAAA,IAAI,EAAGf,OAAD,IAAcZ,cAAc,CAACY,OAAO,CAACE,SAAT,CAAd,CAAkCb,IAAlC,KAA2C,KAAhE;AACTS,UAAAA,MAAM,EAAE;AADC,SAAD,EAG1B;AAACiB,UAAAA,IAAI,EAAGf,OAAD,IAAcZ,cAAc,CAACY,OAAO,CAACE,SAAT,CAAd,CAAkCb,IAAlC,KAA2C,IAAhE;AACAS,UAAAA,MAAM,EAAE;AADR,SAH0B,EAMZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SANY;AADZ,OAFS;AAYbN,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpD,IAAI,CAAEmC,OAAD,KAAc;AACtBnB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,sDAA+CkB,OAAO,CAACf,MAAvD,iBAAoEe,OAAO,CAACd,GAA5E;AAFiB,WAAd,CAAD,CADP;AAKlBQ,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AALc,SADJ;AAQlBC,QAAAA,GAAG,EAAE;AACAF,UAAAA,KAAK,EAAElC,MAAM;AADb,SARa;AAWfqC,QAAAA,OAAO,EAAE;AACRH,UAAAA,KAAK,EAAEtC,GAAG,CAAC,2BAAD,CADF;AAEZe,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AAFQ;AAXM;AAZK,KA/Lb;AA6NVS,IAAAA,iBAAiB,EAAE;AACTpC,MAAAA,OAAO,EAAE,QADA;AAETG,MAAAA,EAAE,EAAG;AACDG,QAAAA,UAAU,EAAE,CAAC;AAACkB,UAAAA,IAAI,EAAGf,OAAD,IAAcZ,cAAc,CAACY,OAAO,CAACE,SAAT,CAAd,CAAkCb,IAAlC,KAA2C,KAAhE;AACTS,UAAAA,MAAM,EAAE;AADC,SAAD,EAG1B;AAACiB,UAAAA,IAAI,EAAGf,OAAD,IAAcZ,cAAc,CAACY,OAAO,CAACE,SAAT,CAAd,CAAkCb,IAAlC,KAA2C,IAAhE;AACAS,UAAAA,MAAM,EAAE;AADR,SAH0B,EAMZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SANY;AADX,OAFI;AAWTN,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACLC,UAAAA,KAAK,EAAEpD,IAAI,CAAEmC,OAAD,KAAc;AACrBnB,YAAAA,IAAI,EAAE,OADe;AAErBC,YAAAA,KAAK,sDAA+CkB,OAAO,CAACf,MAAvD,iBAAoEe,OAAO,CAACd,GAA5E,iBAAsFc,OAAO,CAACb,IAA9F;AAFgB,WAAd,CAAD,CADN;AAKlBO,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AALc,SADJ;AAQlBC,QAAAA,GAAG,EAAE;AACAF,UAAAA,KAAK,EAAElC,MAAM;AADb,SARa;AAWfqC,QAAAA,OAAO,EAAE;AACRH,UAAAA,KAAK,EAAEtC,GAAG,CAAC,2BAAD,CADF;AAEZe,UAAAA,EAAE,EAAE;AAAEwB,YAAAA,SAAS,EAAE;AAAb;AAFQ;AAXM;AAXC,KA7NT;AAyPPU,IAAAA,SAAS,EAAE;AACJrC,MAAAA,OAAO,EAAE,QADL;AAEJG,MAAAA,EAAE,EAAE;AAAEwB,QAAAA,SAAS,EAAE;AAAb,OAFA;AAGJ1B,MAAAA,MAAM,EAAE;AACJwB,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpD,IAAI,CAAEmC,OAAD,KAAc;AACtBnB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK;AAFiB,WAAd,CAAD;AADP;AADJ;AAHJ;AAzPJ;AAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dmappointment.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Julia\": { person: \"Julia Harvees\" },\n    \"Victoria\": {person: \"Victoria Bloom\"},\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"at 5\": { time: \"5:00\"},\n    \"at 5 p.m.\": {time: \"17:00\"},\n    \"at 6\": { time: \"6:00\"},\n    \"at 7\": { time: \"7:00\"},\n    \"at 8\": { time: \"8:00\"},\n    \"at 10\": { time: \"10:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 11\": {time: \"11:00\"},\n    \"at 12\": { time: \"12:00\"},\n    \"at 13\": { time: \"13:00\"},\n    \"at 14\": { time: \"14:00\"},\n    \"at 15\": { time: \"15:00\"},\n    \"at 16\": { time: \"16:00\"},\n\n}\n\nconst booleanGrammar: { [index: string]: {bool?: boolean}} = {\n    \"yes\": { bool: true },\n    \"yep\": { bool: true },\n    \"of course\": { bool: true },\n    \"sure\": { bool: true },\n    \"I want to\": { bool: true },\n    \"no\": { bool: false },\n    \"no way\": { bool: false },\n    \"hell no\": { bool: false },\n    \"nope\": { bool: false },\n}\n\n\n\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\twelcome: {\n\t    on: {\n\t\tRECOGNISED: {\n\t\t    target: 'query',\n\t\t    actions: assign((context) => { return { activity: context.recResult } }),\n                }\n            },\n\t},\n    \tquery: {\n\t    invoke: {\n\t\tid: 'rasa',\n                src: (context, event) => nluRequest(context.activity),\n                onDone: {\n                    target: 'processer',\n                    actions: [assign((context, event) => { return {activity: event.data.intent.name }}),\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\n                },\n\t\tonError: {\n                    target: 'welcome',\n\t\t    actions: (context,event) => console.log(event.data)\n                }\n            }\n\t},\n    processer: {\n        initial: \"prompt\",\n        on: {\n            RECOGNISED: [{ target: 'todo_item', cond: (context) => context.activity === 'todo_item' },\n            { target: 'timer', cond: (context) => context.activity === 'timer' },\n            { target: 'appointment', cond: (context) => context.activity === 'appointment' },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `\"What would you like to do? You can choose appointment, to do item or timer.\"`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry, I don't understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            }\n    },\n    todo_item: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Welcome to TODO Item`\n                }))\n            },\n    }\n    },\n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Welcome to timer`\n                    }))\n                },\n\t\t}\n\t\t},\n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n\t  }\n        },\n\twholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult].bool === true),\n\t\ttarget: \"whole_day_confirmation\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n\ttime: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"time_confirmation\"\n                },\n                { target: \".nomatch\" }]\n\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. What time is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n        },\n\twhole_day_confirmation: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult].bool === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n \ttime_confirmation: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                    target: \"who\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult].bool === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                },\n            },\n\t    confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t}\n\t\t}\n        }})"]},"metadata":{},"sourceType":"module"}