{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Julia\": {\n    person: \"Julia Harvees\"\n  },\n  \"Victoria\": {\n    person: \"Victoria Bloom\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  }\n};\nconst booleanGrammar = {\n  \"yes\": true,\n  \"yep\": true,\n  \"of course\": true,\n  \"sure\": true,\n  \"I want to\": true,\n  \"no\": false,\n  \"no way\": false,\n  \"hell no\": false\n};\nconst yes = booleanGrammar[\"yes\"];\nconst no = booleanGrammar[\"no\"];\nconst testGrammar = {\n  \"appointment\": {\n    activity: \"appointment\"\n  },\n  \"to do item\": {\n    activity: \"TODO item\"\n  },\n  \"to do\": {\n    activity: \"TODO item\"\n  },\n  \"timer\": {\n    activity: \"Timer\"\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => testGrammar[context.recResult] === \"appointment\",\n          actions: assign(context => {\n            return {\n              activity: testGrammar[context.recResult].activity\n            };\n          }),\n          target: \"appointment\"\n        }, {\n          cond: context => testGrammar[context.recResult] === \"to do item\",\n          actions: assign(context => {\n            return {\n              activity: testGrammar[context.recResult].activity\n            };\n          }),\n          target: \"todo_item\"\n        }, {\n          cond: context => testGrammar[context.recResult] === \"timer\",\n          actions: assign(context => {\n            return {\n              activity: testGrammar[context.recResult].activity\n            };\n          }),\n          target: \"timer\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do? You can choose “Appointment”, “To do item” and “Timer”.\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    todo_item: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Welcome to TODO Item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Welcome to timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => booleanGrammar[context.recResult] === no,\n          target: \"time\"\n        }, {\n          cond: context => booleanGrammar[context.recResult] === yes,\n          target: \"whole_day_confirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"time_confirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". What time is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    whole_day_confirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => booleanGrammar[context.recResult] === no,\n          target: \"init\"\n        }, {\n          cond: context => booleanGrammar[context.recResult] === yes,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time_confirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => booleanGrammar[context.recResult] === no,\n          target: \"who\"\n        }, {\n          cond: context => booleanGrammar[context.recResult] === yes,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmed: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/Acer/Desktop/LANGUAGE-TECHNOLOGY/Dialogue-Systems/assignment2/code/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","booleanGrammar","yes","no","testGrammar","activity","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","cond","context","recResult","actions","target","prompt","entry","ENDSPEECH","ask","nomatch","todo_item","timer","appointment","who","wholeday","whole_day_confirmation","time_confirmation","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Julia\": { person: \"Julia Harvees\" },\n    \"Victoria\": {person: \"Victoria Bloom\"},\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"at 8\": { time: \"8:00\"},\n    \"at 10\": { time: \"10:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 11\": {time: \"11:00\"},\n\n}\n\nconst booleanGrammar = {\n    \"yes\": true,\n    \"yep\": true,\n    \"of course\": true,\n    \"sure\": true,\n    \"I want to\": true,\n    \"no\": false,\n    \"no way\": false,\n    \"hell no\": false,\n}\n\nconst yes = booleanGrammar[\"yes\"]\nconst no = booleanGrammar[\"no\"]\n\nconst testGrammar: { [index: string]: { activity?: string } } = {\n    \"appointment\": { activity: \"appointment\"},\n    \"to do item\": { activity: \"TODO item\"},\n    \"to do\": { activity: \"TODO item\"},\n    \"timer\": { activity: \"Timer\"},\n}\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => testGrammar[context.recResult] === \"appointment\",\n                actions: assign((context) => { return {  activity: testGrammar[context.recResult]. activity } }),\n                    target: \"appointment\"\n                },\n        {cond: (context) => (testGrammar[context.recResult] === \"to do item\"),\n        actions: assign((context) => { return {  activity: testGrammar[context.recResult]. activity } }),\n        target: \"todo_item\"\n        },\n        {cond: (context) => (testGrammar[context.recResult] === \"timer\"),\n        actions: assign((context) => { return {  activity: testGrammar[context.recResult]. activity } }),\n        target: \"timer\"\n        },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: { entry: say(\"What would you like to do? You can choose “Appointment”, “To do item” and “Timer”.\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: listen()\n            },\n            nomatch: {\n                entry: say(\"Sorry I don't understand\"),\n                on: { ENDSPEECH: \"prompt\" }\n            }\n        }\n    },\n        todo_item: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Welcome to TODO Item`\n                    }))\n                },\n\t\t}\n\t\t},\n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Welcome to timer`\n                    }))\n                },\n\t\t}\n\t\t},\n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n\t  }\n        },\n\twholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult] === no),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult] === yes),\n\t\ttarget: \"whole_day_confirmation\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n\ttime: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"time_confirmation\"\n                },\n                { target: \".nomatch\" }]\n\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. What time is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n        },\n\twhole_day_confirmation: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult] === no),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult] === yes),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n \ttime_confirmation: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (booleanGrammar[context.recResult] === no),\n                    target: \"who\"\n                },\n\t\t{cond: (context) => (booleanGrammar[context.recResult] === yes),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                },\n            },\n\t    confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t}\n\t\t}\n        }})"]},"metadata":{},"sourceType":"module"}