{"ast":null,"code":"import _objectSpread from \"/mnt/c/Users/Acer/Desktop/LANGUAGE-TECHNOLOGY/Dialogue-Systems/assignment2/code/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { assign, actions } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt, reprompt, reprompt2, nomatch) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: prompt,\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      reprompt: {\n        entry: say(reprompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      reprompt2: {\n        entry: say(reprompt2),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      },\n      nomatch: {\n        entry: say(nomatch),\n        on: {\n          ENDSPEECH: \"reprompt\"\n        }\n      }\n    }\n  };\n}\n\nconst grammar = {\n  //people\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Julia\": {\n    person: \"Julia Harvees\"\n  },\n  \"Victoria\": {\n    person: \"Victoria Bloom\"\n  },\n  //days\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  //time\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"5\": {\n    time: \"5:00\"\n  },\n  \"at 5 p.m.\": {\n    time: \"5:00 p.m.\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"6\": {\n    time: \"6:00\"\n  },\n  \"at 6 p.m.\": {\n    time: \"6:00 p.m.\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"7\": {\n    time: \"7:00\"\n  },\n  \"at 7 p.m.\": {\n    time: \"7:00 p.m.\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 13\": {\n    time: \"1:00 p.m.\"\n  },\n  \"at 14\": {\n    time: \"2:00 p.m.\"\n  },\n  \"at 15\": {\n    time: \"3:00 p.m.\"\n  },\n  \"at 16\": {\n    time: \"4:00 p.m.\"\n  }\n};\nconst booleanGrammar = {\n  //agree\n  \"yes\": {\n    bool: true\n  },\n  \"yep\": {\n    bool: true\n  },\n  \"of course\": {\n    bool: true\n  },\n  \"sure\": {\n    bool: true\n  },\n  \"I want to\": {\n    bool: true\n  },\n  //disagree\n  \"no\": {\n    bool: false\n  },\n  \"no way\": {\n    bool: false\n  },\n  \"hell no\": {\n    bool: false\n  },\n  \"nope\": {\n    bool: false\n  }\n};\nconst commands = {\n  \"help\": \"H\"\n};\nlet count = 0;\nexport const dmMachine = {\n  initial: 'welcome',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    maxspeech: {\n      entry: say(\"I cannot hear you. Don't be so shy! Let me say that again.\"),\n      on: {\n        'ENDSPEECH': 'appointment.hist'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"appointment\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    appointment: {\n      initial: \"who\",\n      on: {\n        RECOGNISED: {\n          cond: context => context.recResult in commands,\n          target: \"#help\"\n        }\n      },\n      states: {\n        hist: {\n          type: 'history'\n        },\n        who: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }), cancel('maxsp')],\n              target: \"day\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              cond: () => count++ <= 2,\n              target: '#root.dm.appointment.maxspeech'\n            }, {\n              target: '#root.dm.appointment.final'\n            }]\n          }\n        }, promptAndAsk(say(\"Who are you meeting with?\"), \"Tell me a name\", \"Tell me a name\", \"Sorry, I don't know them\")),\n        day: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }), cancel('maxsp')],\n              target: \"wholeday\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              cond: () => count++ <= 2,\n              target: '#root.dm.appointment.maxspeech'\n            }, {\n              target: '#root.dm.appointment.final'\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n        })), \"Any special day you want to meet?\", \"Tell me a day of the week\", \"Sorry, I did not get that.\")),\n        wholeday: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"bool\" in (booleanGrammar[context.recResult] || {}) && booleanGrammar[context.recResult].bool === true,\n              actions: cancel('maxsp'),\n              target: \"whole_day_confirmation\"\n            }, {\n              cond: context => \"bool\" in (booleanGrammar[context.recResult] || {}) && booleanGrammar[context.recResult].bool === false,\n              actions: cancel('maxsp'),\n              target: \"time\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              cond: () => count++ <= 2,\n              target: '#root.dm.appointment.maxspeech'\n            }, {\n              target: '#root.dm.appointment.final'\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n        })), \"Will it take the entire day?\", \"say yes or no\", \"Sorry, I'm afraid that I don't understand\")),\n        time: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: [cancel('maxsp'), assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              })],\n              target: \"time_confirmation\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              cond: () => count++ <= 2,\n              target: '#root.dm.appointment.maxspeech'\n            }, {\n              target: '#root.dm.appointment.final'\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. What time is your meeting?\"\n        })), \"When does your meeting start?\", \"Tell me an hour\", \"Sorry, I don't understand\")),\n        whole_day_confirmation: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"bool\" in (booleanGrammar[context.recResult] || {}) && booleanGrammar[context.recResult].bool === true,\n              actions: cancel('maxsp'),\n              target: \"confirmed\"\n            }, {\n              cond: context => \"bool\" in (booleanGrammar[context.recResult] || {}) && booleanGrammar[context.recResult].bool === false,\n              actions: cancel('maxsp'),\n              target: \"wholeday\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              cond: () => count++ <= 2,\n              target: '#root.dm.appointment.maxspeech'\n            }, {\n              target: '#root.dm.appointment.final'\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n        })), \"Say yes or no\", \"Do you agree?\", \"Sorry, I do not understand\")),\n        time_confirmation: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => booleanGrammar[context.recResult].bool === true,\n              actions: cancel('maxsp'),\n              target: \"confirmed\"\n            }, {\n              cond: context => booleanGrammar[context.recResult].bool === false,\n              actions: cancel('maxsp'),\n              target: \"who\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              cond: () => count++ <= 2,\n              target: '#root.dm.appointment.maxspeech'\n            }, {\n              target: '#root.dm.appointment.final'\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n        })), \"Say yes or no\", \"Do you agree?\", \"Sorry, I do not understand\")),\n        confirmed: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created!\"\n              }))\n            }\n          }\n        }\n      }\n    },\n    help: {\n      id: 'help',\n      entry: say(\"We can go back if you need help\"),\n      always: [{\n        target: 'appointment.hist',\n        actions: assign(context => {\n          return {\n            count: count - 1\n          };\n        })\n      }]\n    },\n    final: {\n      entry: say(\"Let me know if you change your mind about talking to me\"),\n      on: {\n        'ENDSPEECH': '#root.dm.init'\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/Acer/Desktop/LANGUAGE-TECHNOLOGY/Dialogue-Systems/assignment2/code/react-xstate-colourchanger/src/dmAppointmentPlus.ts"],"names":["assign","actions","send","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","reprompt","reprompt2","nomatch","initial","states","entry","on","ENDSPEECH","ask","delay","id","grammar","person","day","time","booleanGrammar","bool","commands","count","dmMachine","init","CLICK","maxspeech","welcome","appointment","RECOGNISED","cond","context","recResult","target","hist","who","MAXSPEECH","wholeday","whole_day_confirmation","time_confirmation","confirmed","help","always","final"],"mappings":"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","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\";\nconst { send, cancel } = actions;\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>, reprompt:string, reprompt2:string, nomatch: string) : MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states:{\n            prompt: {\n                entry: prompt,\n                on: { ENDSPEECH: 'ask' }\n                },\n            reprompt: {\n                entry: say(reprompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            reprompt2: {\n                entry: say(reprompt2),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: 5000, id: 'maxsp'})],\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"reprompt\" }\n            },\n        }\n    })\n}\n\n\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    //people\n    \"John\": { person: \"John Appleseed\" },\n    \"Julia\": { person: \"Julia Harvees\" },\n    \"Victoria\": {person: \"Victoria Bloom\"},\n\n    //days\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    //time\n    \"at 5\": { time: \"5:00\"},\n    \"5\": { time: \"5:00\"},\n    \"at 5 p.m.\": {time: \"5:00 p.m.\"},\n    \"at 6\": { time: \"6:00\"},\n    \"6\": { time: \"6:00\"},\n    \"at 6 p.m.\": { time: \"6:00 p.m.\"},\n    \"at 7\": { time: \"7:00\"},\n    \"7\": { time: \"7:00\"},\n    \"at 7 p.m.\": { time: \"7:00 p.m.\"},\n    \"at 8\": { time: \"8:00\"},\n    \"8\": { time: \"8:00\"},\n    \"at 10\": { time: \"10:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 11\": {time: \"11:00\"},\n    \"11\": {time: \"11:00\"},\n    \"at 12\": { time: \"12:00\"},\n    \"12\": { time: \"12:00\"},\n    \"at 13\": { time: \"1:00 p.m.\"},\n    \"at 14\": { time: \"2:00 p.m.\"},\n    \"at 15\": { time: \"3:00 p.m.\"},\n    \"at 16\": { time: \"4:00 p.m.\"},\n\n}\n\nconst booleanGrammar: { [index: string]: {bool?: boolean}} = {\n    //agree\n    \"yes\": { bool: true },\n    \"yep\": { bool: true },\n    \"of course\": { bool: true },\n    \"sure\": { bool: true },\n    \"I want to\": { bool: true },\n\n    //disagree\n    \"no\": { bool: false },\n    \"no way\": { bool: false },\n    \"hell no\": { bool: false },\n    \"nope\": { bool: false },\n}\n\nconst commands = {\"help\":\"H\"};\n\nlet count = 0\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        maxspeech : {\n            entry: say(\"I cannot hear you. Don't be so shy! Let me say that again.\"),\n            on: {'ENDSPEECH': 'appointment.hist'}\n        },\n        welcome: { \n            initial: \"prompt\",\n            on: { ENDSPEECH: \"appointment\" },\n            states: { \n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        appointment: {\n            initial: \"who\",\n            on: {\n                RECOGNISED: {cond: (context) => (context.recResult in commands),\n                           target: \"#help\"},},\n\n\n            states:{\n                hist: {type: 'history'},\n                who: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"person\" in (grammar[context.recResult] || {}), \n                            actions: [assign((context) => { return { person: grammar[context.recResult].person } }),\n                            cancel('maxsp')],\n                            target: \"day\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                        {target: '#root.dm.appointment.final'}]\n                    },\n                    \n                    ...promptAndAsk(say(\"Who are you meeting with?\"),\n                    \"Tell me a name\",\n                    \"Tell me a name\",\n                    \"Sorry, I don't know them\")\n                },\n\n                day:{\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"day\" in (grammar[context.recResult] || {}), \n                            actions: [assign((context) => { return { day: grammar[context.recResult].day } }),\n                            cancel('maxsp')],\n                            target: \"wholeday\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        },\n                    ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK. ${context.person}. On which day is your meeting?`})), \n                        \"Any special day you want to meet?\",\n                        \"Tell me a day of the week\",\n                        \"Sorry, I did not get that.\")\n                },\n\n                wholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => \"bool\" in (booleanGrammar[context.recResult] || {}) &&\n                            (booleanGrammar[context.recResult].bool === true),\n                            actions: cancel('maxsp'),\n                            target: \"whole_day_confirmation\"}, \n\n                            {cond: (context) => \"bool\" in (booleanGrammar[context.recResult] || {}) &&\n                            (booleanGrammar[context.recResult].bool === false),\n                            actions: cancel('maxsp'),\n                            target: \"time\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {cond: (context) => !(context.recResult in commands),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`})),\n                        \"Will it take the entire day?\",\n                        \"say yes or no\",\n                        \"Sorry, I'm afraid that I don't understand\"),\n                },\n                \n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: [cancel('maxsp'),assign((context) => { return { time: grammar[context.recResult].time } }),],\n                            target: \"time_confirmation\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK. What time is your meeting?`})), \n                            \"When does your meeting start?\",\n                            \"Tell me an hour\",\n                            \"Sorry, I don't understand\"),\n                        },\n                whole_day_confirmation:{\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"bool\" in (booleanGrammar[context.recResult] || {}) &&\n                            (booleanGrammar[context.recResult].bool === true),\n                            actions: cancel('maxsp'),\n                            target: \"confirmed\"},\n\n                            {cond: (context) => \"bool\" in (booleanGrammar[context.recResult] || {}) &&\n                            (booleanGrammar[context.recResult].bool === false),\n                            actions: cancel('maxsp'),\n                            target: \"wholeday\"},\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n                        \n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})),\n                    \"Say yes or no\",\n                    \"Do you agree?\",\n                    \"Sorry, I do not understand\")\n                },\n                time_confirmation: {\n                  initial: \"prompt\",\n                    on:  {\n                        RECOGNISED: [\n                            {cond: (context) => (booleanGrammar[context.recResult].bool === true),\n                            actions:cancel('maxsp'),\n                            target: \"confirmed\"},\n\n                            {cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                            actions: cancel('maxsp'),\n                            target: \"who\"},\n\n\n                            {cond: (context) => (context.recResult in commands),\n                            target: \"#help\"},\n\n                            {actions: cancel('maxsp'),\n                            target: \".nomatch\" }],\n\n                        MAXSPEECH: [{cond: () => (count++) <= 2, target: '#root.dm.appointment.maxspeech'},\n                            {target: '#root.dm.appointment.final'}]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\n                    \"Say yes or no\",\n                    \"Do you agree?\",\n                    \"Sorry, I do not understand\"),\n                },\n                confirmed: {\n                    initial: \"prompt\",\n                    on: { ENDSPEECH: \"#root.dm.init\" },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Your appointment has been created!`}))\n                        },\n                }\n                },\n            }\n           \n        },\n        help: {\n            id: 'help',\n            entry: say(\"We can go back if you need help\"),\n            always: [{target: 'appointment.hist',\n                      actions: assign((context) => {return {count: ( count - 1 )}}) }]\n        },\n\n        final: {\n            entry: say(\"Let me know if you change your mind about talking to me\"),\n            on: {'ENDSPEECH': '#root.dm.init'}\n        },  \n    }\n})"]},"metadata":{},"sourceType":"module"}