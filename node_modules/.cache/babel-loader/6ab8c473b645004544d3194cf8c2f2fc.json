{"ast":null,"code":"import _objectSpread from \"/mnt/c/Users/Acer/Desktop/LANGUAGE-TECHNOLOGY/Dialogue-Systems/assignment2/code/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\"; //import { dmMachine } from \"./dmColourChanger\";\n\nimport { dmMachine } from \"./dmAppointmentPlus\"; //dmAppointmentPlus\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dmappointment.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nexport const dmMenu = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      id: \"start\",\n      on: {\n        RECOGNISED: {\n          target: 'query',\n          actions: assign(context => {\n            return {\n              activity: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"What would you like to do? You can choose appointment, to do item or timer.\")),\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.activity),\n        onDone: {\n          target: 'processer',\n          actions: [assign((context, event) => {\n            return {\n              activity: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    processer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: 'todo_item',\n          cond: context => context.activity === 'todo_item'\n        }, {\n          target: 'timer',\n          cond: context => context.activity === 'timer'\n        }, {\n          target: 'appointment',\n          cond: context => context.activity === 'appointment'\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK\"\n          }))\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"#start\"\n          }\n        }\n      }\n    },\n    todo_item: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Welcome to To do item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Welcome to timer\"\n          }))\n        }\n      }\n    },\n    appointment: _objectSpread({}, dmMachine)\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/Acer/Desktop/LANGUAGE-TECHNOLOGY/Dialogue-Systems/assignment2/code/react-xstate-colourchanger/src/dmMenu.ts"],"names":["send","assign","dmMachine","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","say","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMenu","init","CLICK","welcome","id","RECOGNISED","target","actions","context","activity","recResult","query","invoke","src","event","onDone","intent","name","console","log","onError","processer","cond","nomatch","todo_item","timer","appointment"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n//import { dmMachine } from \"./dmColourChanger\";\nimport { dmMachine} from \"./dmAppointmentPlus\";//dmAppointmentPlus\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://dmappointment.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n\t\tentry: say(prompt),\n\t\ton: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n\t\tentry: send('LISTEN'),\n            },\n\t}})\n}\n\n\nexport const dmMenu: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\twelcome: {\n        id: \"start\",\n\t    on: {\n\t\tRECOGNISED: {\n\t\t    target: 'query',\n\t\t    actions: assign((context) => { return { activity: context.recResult } }),\n                }\n            },\n\t    ...promptAndAsk(\"What would you like to do? You can choose appointment, to do item or timer.\")\n\t},\n    \tquery: {\n\t    invoke: {\n\t\tid: 'rasa',\n                src: (context, event) => nluRequest(context.activity),\n                onDone: {\n                    target: 'processer',\n                    actions: [assign((context, event) => { return {activity: event.data.intent.name }}),\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\n                },\n\t\tonError: {\n                    target: 'welcome',\n\t\t    actions: (context,event) => console.log(event.data)\n                }\n            }\n\t},\n    processer: {\n        initial: \"prompt\",\n        on: {\n            ENDSPEECH: [\n                { target: 'todo_item', cond: (context) => context.activity === 'todo_item' },\n                { target: 'timer', cond: (context) => context.activity === 'timer' },\n                { target: 'appointment', cond: (context) => context.activity === 'appointment' }, \n                { target: \".nomatch\" } ]\n        },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `OK`\n                \n                })),\n    },\n            nomatch: {\n                entry: say(\"Sorry, I don't understand\"),\n                on: { ENDSPEECH: \"#start\" }\n    } \n}\n    },\n    todo_item: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Welcome to To do item`\n                }))\n            },\n    }\n    },\n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Welcome to timer`\n                    }))\n                },\n\t\t}\n\t\t},\n        appointment: {\n            ...dmMachine\n        }\n    }})"]},"metadata":{},"sourceType":"module"}